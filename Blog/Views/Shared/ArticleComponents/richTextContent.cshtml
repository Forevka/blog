@using HtmlAgilityPack
@inherits UmbracoViewPage<Umbraco.Cms.Core.Models.Blocks.BlockGridItem<RichTextContent, RichTextContentSettings>>
@{
    Layout = "ArticleComponents/BaseContainer";
}

@{
    // Get the HTML string (depending on your implementation, you might call ToHtmlString() or ToString())
    var html = Model.Content.Text!.ToString();

    // Load the HTML into an HtmlAgilityPack document
    var doc = new HtmlDocument();
    doc.LoadHtml(html);

    var anchorNodes = doc.DocumentNode.SelectNodes("//a[@href]");
    if (anchorNodes != null)
    {
        foreach (var anchor in anchorNodes)
        {
            // Option 1: Using Font Awesome icon (requires including Font Awesome CSS in your view)
            string iconHtml = "<svg  xmlns=\"http://www.w3.org/2000/svg\"  width=\"20\"  height=\"20\"  viewBox=\"0 0 24 24\"  fill=\"none\"  stroke=\"currentColor\"  stroke-width=\"2\"  stroke-linecap=\"round\"  stroke-linejoin=\"round\"  class=\"icon icon-tabler icons-tabler-outline icon-tabler-link\"><path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M9 15l6 -6\" /><path d=\"M11 6l.463 -.536a5 5 0 0 1 7.071 7.072l-.534 .464\" /><path d=\"M13 18l-.397 .534a5.068 5.068 0 0 1 -7.127 0a4.972 4.972 0 0 1 0 -7.071l.524 -.463\" /></svg>";
                    
            // Option 2: Using an inline SVG or Unicode character, e.g.,
            // string iconHtml = " <span style='font-family: \"Segoe UI Symbol\";'>🔗</span>";
                    
            // Append the icon HTML to the link's inner content.
            anchor.InnerHtml += iconHtml;
        }
    }

    // Get the modified HTML. Use OuterHtml if you need the full document markup.
    string updatedHtml = doc.DocumentNode.InnerHtml;

    // Optionally, wrap it back into a safe HTML string (for example, in MVC)
    var processed = new HtmlString(updatedHtml);
}

<div class="text-box">
    <div class="rich-text w-richtext">
        @processed
    </div>
</div>