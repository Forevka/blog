@using Umbraco.Cms.Core.Models.Blocks
@using Umbraco.Cms.Web.Common.PublishedModels;
@inherits UmbracoViewPage<ArticlesItem>
@{

    Layout = "master.cshtml";

    ViewData["Title"] = Model.Title;

    var tocItems = Model.Content!
        .Where(x => x.Settings is ITocEntry { IsEnabled: true })
        .Select(x => x.Settings as ITocEntry)
        .ToList();
}

@section metatags
{
    <meta content="@Model.CardImage?.Url(mode:UrlMode.Absolute)" property="twitter:image">
    <meta content="@Model.Description" property="twitter:description">
    <meta content="@Model.Title" property="twitter:title">

    <meta content="@Model.CardImage?.Url()" property="og:image">
    <meta content="@Model.Description" property="og:description">
    <meta content="@Model.Title" property="og:title">

    <meta content="@Model.Description" name="description">
}

@await Html.PartialAsync("TOC", tocItems)

<!-- Post Header (sticky section with title, short description, and details) -->
<div class="section sticky">
    <div class="container no-bottom-padding">
        <div class="text-box centre">
            <div class="text-align-centre">
                @await Html.PartialAsync("AuroraTitle", @Model.Title)

                <div class="spacer _24"></div>
                <div class="text-color-600">
                    <div class="paragraph large">@Model.Description</div>
                </div>
                <div class="spacer _24"></div>
                <div class="post-details-wrapper is-centre">
                    <div class="post-detail">@string.Join(", ", Model.Category!.Select(x => (x as ArticleCategory)?.ArticleCategoryName).ToList())</div>
                    <div class="post-detail">·</div>
                    <div class="post-detail">@Model.ReadTime min</div>
                    <div class="post-detail">·</div>
                    <div class="post-detail">@Model.CreateDate.ToString("yyyy/MM/dd")</div>
                </div>
            </div>
            <div class="spacer _80"></div>
        </div>
    </div>
</div>

<!-- Header Image Section -->
<div class="section">
    <div class="inset-container">
        <div class="header-image-wrapper">
            <img src="@Model.HeroImage!.Url()" loading="lazy" alt="" class="post-item-image" />
        </div>
    </div>
</div>

<!-- Post Content Section -->
<div class="section">
    <div class="inset-container post-content">
        <div class="container article-container">
            <div class="text-box centre article-container-item">

                <div id="light-toc" class="color-block background-3">
                    <div id="toc_list" onclick="if (document.getElementById('toc').style.display === 'none') { document.getElementById('toc').style.display = 'block'; } else { document.getElementById('toc').style.display = 'none'; }" role="button" tabindex="0">
                        Table of content <svg width="18" height="18" viewBox="0 0 24 24"><path fill="#ffb88f" d="M12,18.17L8.83,15L7.42,16.41L12,21L16.59,16.41L15.17,15M12,5.83L15.17,9L16.58,7.59L12,3L7.41,7.59L8.83,9L12,5.83Z"/></svg>
                    </div>
                    <div id="toc">
                        <ol>

                            @foreach (var tocEntry in tocItems)
                            {
                                <li><a href="#@tocEntry!.TocAnchor">@tocEntry.TocText</a></li>
                            }

                        </ol>
                    </div>
                </div>

                <div class="rich-text w-richtext">
                    <article class="blog-post">
                        <h1 class="heading">@Model.BodyTitle</h1>
                        <p class="paragraph">@Model.BodyDescription</p>

                        @{
                            foreach (var item in Model.Content!)
                            {
                                var content = item.Content;

                                @await Html.PartialAsync("/Views/Shared/ArticleComponents/" + content.ContentType.Alias + ".cshtml", item)
                                

                                if (item is BlockGridItem<CodeBlockContent, CodeBlockContentSettings>)
                                {
                                    if (!Context.Items.TryGetValue("CodeHighlightInitialized", out var _))
                                    {

                                        @section HeadContent {
                                            <script src="https://unpkg.com/@@highlightjs/cdn-assets@11.9.0/highlight.min.js"></script>
                                            <script src="https://unpkg.com/@@highlightjs/cdn-assets@11.9.0/languages/csharp.min.js"></script>
                                            <script src="https://cdn.jsdelivr.net/npm/highlightjs-line-numbers.js/dist/highlightjs-line-numbers.min.js"></script>
                                        }


                                        @section Scripts {
                                            <script>hljs.highlightAll();</script>
                                            <script>hljs.initLineNumbersOnLoad();</script>


                                            <script>
                                                // for beutiful strong underline
                                                const magicalUnderlines = Array.from(document.querySelectorAll('strong'));

                                                const gradientAPI = 'https://gist.githubusercontent.com/wking-io/3e116c0e5675c8bcad8b5a6dc6ca5344/raw/4e783ce3ad0bcd98811c6531e40256b8feeb8fc8/gradient.json';

                                                // HELPER FUNCTIONS

                                                // 1. Get random number in range. Used to get random index from array.
                                                const randNumInRange = max => Math.floor(Math.random() * (max - 1));

                                                // 2. Merge two separate array values at the same index to
                                                // be the same value in new array.
                                                const mergeArrays = (arrOne, arrTwo) => arrOne.
                                                map((item, i) => `${item} ${arrTwo[i]}`).
                                                join(', ');

                                                // 3. Curried function to add a background to array of elms
                                                const addBackground = elms => color => {
                                                  elms.forEach(el => {
                                                    el.style.backgroundImage = color;
                                                  });
                                                };
                                                // 4. Function to get data from API
                                                const getData = async url => {
                                                    return [
                                                        {
                                                            "name": "fierySpark",
                                                            "direction": "90deg",
                                                            "colors": ["#E52020", "#FBA518"],
                                                            "positions": ["0%", "100%"]
                                                        },
                                                        {
                                                        "name": "goldenFlare",
                                                        "direction": "to right",
                                                        "colors": ["#FBA518", "#F9CB43"],
                                                        "positions": ["0%", "100%"]
                                                        },
                                                        {
                                                        "name": "sunsetFusion",
                                                        "direction": "45deg",
                                                        "colors": ["#E52020", "#FBA518", "#F9CB43"],
                                                        "positions": ["0%", "50%", "100%"]
                                                        },
                                                        {
                                                        "name": "amberTwilight",
                                                        "direction": "to top",
                                                        "colors": ["#FBA518", "#F9CB43", "#A89C29"],
                                                        "positions": ["0%", "50%", "100%"]
                                                        },
                                                        {
                                                        "name": "radiantBurst",
                                                        "direction": "to left",
                                                        "colors": ["#E52020", "#FBA518", "#F9CB43", "#A89C29"],
                                                        "positions": ["0%", "33%", "67%", "100%"]
                                                        },
                                                        {
                                                        "name": "reverseGlow",
                                                        "direction": "to bottom",
                                                        "colors": ["#A89C29", "#F9CB43", "#FBA518", "#E52020"],
                                                        "positions": ["0%", "33%", "67%", "100%"]
                                                        },
                                                        {
                                                        "name": "crimsonHeat",
                                                        "direction": "120deg",
                                                        "colors": ["#E52020", "#F9CB43"],
                                                        "positions": ["0%", "100%"]
                                                        },
                                                        {
                                                        "name": "saffronDream",
                                                        "direction": "to right",
                                                        "colors": ["#FBA518", "#A89C29"],
                                                        "positions": ["0%", "100%"]
                                                        },
                                                        {
                                                        "name": "vividEmber",
                                                        "direction": "135deg",
                                                        "colors": ["#E52020", "#F9CB43", "#A89C29"],
                                                        "positions": ["0%", "50%", "100%"]
                                                        },
                                                        {
                                                        "name": "citrusFlare",
                                                        "direction": "200deg",
                                                        "colors": ["#FBA518", "#F9CB43", "#E52020"],
                                                        "positions": ["0%", "50%", "100%"]
                                                        }
                                                    ];
                                                };

                                                // 5. Partial Application of addBackground to always apply
                                                // background to the magicalUnderlines constant
                                                const addBackgroundToUnderlines = addBackground(magicalUnderlines);

                                                // GRADIENT FUNCTIONS

                                                // 1. Build CSS formatted linear-gradient from API data
                                                const buildGradient = obj => `linear-gradient(${obj.direction}, ${mergeArrays(obj.colors, obj.positions)})`;

                                                // 2. Get single gradient from data pulled in array and
                                                // apply single gradient to a callback function
                                                const applyGradient = async (url, callback) => {
                                                  const data = await getData(url);
                                                  const gradient = buildGradient(data[randNumInRange(data.length)]);
                                                  callback(gradient);
                                                };

                                                // RESULT
                                                applyGradient(gradientAPI, addBackgroundToUnderlines);
                                            </script>
                                        }



                                        Context.Items["CodeHighlightInitialized"] = true;
                                    }
                                }
                            }
                        }
                    </article>

                </div>
            </div>
            
            
        </div>
    </div>
</div>

@if (Model.RelatedArticles != null && Model.RelatedArticles.Any())
{
    <!-- Related Posts Section -->
    <div class="section">
        <div class="inset-container post-content">
            <div class="container">
                <div class="text-box centre">
                    <div class="related-title-wrapper">
                        <h2 class="heading large">Read also</h2>
                    </div>
                </div>
                <div class="spacer _80"></div>
                <div class="posts-wrapper w-dyn-list">
                    <div role="list" class="posts-grid all-articles w-dyn-items">
                        @foreach (var related in Model.RelatedArticles)
                        {
                            @await Html.PartialAsync("_BlogPostItem", related as ArticlesItem)
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}
