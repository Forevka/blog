# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

env:
  dockerRepositoryName: 'forevka/blog'

name: CI Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: 'recursive'
    
    - name: Docker Login
      run: |
        docker login -u ${{secrets.DOCKER_USER}} -p ${{secrets.DOCKER_PASSWORD}}
    
    - name: Create production config file
      run: |
        cat <<EOF > Blog/appsettings.Production.json
        {
          "$schema": "appsettings-schema.json",
          "Serilog": {
            "MinimumLevel": {
              "Default": "Information"
            },
            "WriteTo": [
              {
                "Name": "Async",
                "Args": {
                  "configure": [
                    {
                      "Name": "Console"
                    }
                  ]
                }
              }
            ]
          },
          "Umbraco": {
            "CMS": {
              "Content": {
                "MacroErrors": "Throw"
              },
              "Hosting": {
                "Debug": false
              }
            }
          },
          "ConnectionStrings": {
            "umbracoDbDSN": "${{ secrets.PROD_CONNECTION_STRING }}",
            "umbracoDbDSN_ProviderName": "System.Data.SqlClient"
          }
        }
        EOF

    - name: Verify production config file exists
      run: |
        echo "Listing contents of Blog directory:"
        ls -la Blog

    - name: Check for appsettings.Production.json file
      run: |
        if [ -f Blog/appsettings.Production.json ]; then
          echo "Production config file successfully created."
        else
          echo "Error: Production config file not found!" >&2
          exit 1
        fi

    - name: Build the Docker image
      run: docker build . --tag ${{env.dockerRepositoryName}}
      
    - name: Docker Push
      run: docker push ${{env.dockerRepositoryName}}
      